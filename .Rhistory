fights_tidy %>%
select(loser_charater) %>%
rename(charater=loser_charater)
) %>%
distinct() %>%
mutate(id=row_number()) %>%
select(id, everything())
# save the dataset
write.csv(all_charaters, "generated_datasets/charaters.csv")
# statistics for each charater
# add wins statistics foreach charater
all_charaters_statistics <- fights_tidy %>%
group_by(winner_charater) %>%
summarise(
n_win = n(),
) %>%
rename(charater=winner_charater) %>%
# add loss statistics foreach charater
full_join(
fights_tidy %>%
group_by(loser_charater) %>%
summarise(
n_lose = n()
) %>%
rename(charater=loser_charater),
by= "charater"
) %>%
# replace NA values with 0
replace_na(list(n_win=0, n_lose=0)) %>%
# calculate total fights
mutate(n_fights = n_win + n_lose) %>%
# arrange by fights number
arrange(-n_fights) %>%
# add charater type label
left_join(all_charaters, by="charater") %>%
# order columns
select(charater,n_fights, n_win, n_lose)
all_charaters_statistics
# remove fights where the number of winners/losers is unknow
fights_tidy_clear <- fights_tidy %>%
filter(!is.na(winner_n) & !is.na(loser_n))
# calculate the number of "integer" rows + extra foreach fight
fights_tidy_clear <- fights_tidy_clear %>%
mutate(
number_integer_rows = loser_n %/% winner_n,
extra = (loser_n %% winner_n) / winner_n
)
fights_elo_format_readable <-
# fights with integer score
fights_tidy_clear %>%
filter(number_integer_rows > 0) %>%
group_by(id) %>%
expand(count = seq(1:number_integer_rows), winner=winner_charater, loser=loser_charater, score=1) %>%
bind_rows(
# fights with decimal scores
fights_tidy_clear %>%
filter(extra>0) %>%
rename(
winner = winner_charater,
loser = loser_charater,
score = extra,
) %>%
mutate(count = number_integer_rows + 1) %>%
select(id, count, winner, loser, score)
) %>%
arrange(id, count)
# make the score from (0,1] -> (0.5,1]
# (they are all victories)
fights_elo_format_readable <- fights_elo_format_readable %>%
mutate(
score=0.5 + score/2
)
# insert charater ids
fights_elo_format_readable <- fights_elo_format_readable %>%
# set the id of winner
left_join(
all_charaters %>% rename(winner_id = id),
by=c("winner"="charater")
) %>%
# # set the id of winner
left_join(
all_charaters %>% rename(loser_id = id),
by=c("loser"="charater")
)
fights_elo_format <- fights_elo_format_readable %>%
# set correct var names
rename(White=winner_id, Black=loser_id, Score=score)
# save the dataset
write.csv(fights_elo_format, "generated_datasets/fights_elo_format.csv")
fights_elo_format
##  Elo rating system
# INPUT
# games: a game *matrix* with columns White, Black and Score
#        Players are integer numbers starting at 1
#        The matrix is sorted in chronological order
# zeta: logistic parameter
# k: update factor
# OUTPUT
# r: rating vector
elo = function(games, z = 400, k = 25) {
# number of players
# (players are integer numbers starting at 1)
n = max(c(games[, "White"], games[, "Black"]))
# number of games
m = nrow(games)
# rating vector
r = rep(0, n)
# iterate through games
for (i in 1:m) {
score = games[i, "Score"]
white = games[i, "White"]
black = games[i, "Black"]
# compute update
spread = r[white] - r[black]
mu = 1 / (1 + 10^(-spread / z))
update = k * (score - mu)
# update ratings
r[white] = r[white] + update
r[black] = r[black] - update
}
return(r)
}
scores_list <- elo(as.data.frame(fights_elo_format))
scores <-
tibble(score = scores_list) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
left_join(all_charaters, by="id") %>%
arrange(-score)
ggplot(data=scores %>% head(), mapping = aes(x=reorder(charater, -score), y=score)) +
geom_bar(stat="identity")
print(scores)
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("generated_datasets/fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("generated_datasets/charaters.csv")
library(shiny)
library(dplyr)
library(ggplot2)
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("generated_datasets/fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("generated_datasets/charaters.csv")
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("generated_datasets/fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("generated_datasets/charaters.csv")
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("generated_datasets/fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("generated_datasets/charaters.csv")
# import charater Dataset
characters <- read.csv("generated_datasets/charaters.csv")
# cache results
# knitr::opts_chunk$set(cache=TRUE, echo = FALSE, eval = FALSE, message=FALSE, warning = FALSE, fig.align='center')
# library to read the excell file
library(readxl)
# library to make the dataset acceptable
library(tidyr)
# library to have tibbles and manipulate thes easier
library(dplyr)
# library to manipulate strings, in particular I need it
# for regular expressions
library(stringr)
library(ggplot2)
# read all the sheets
# https://stackoverflow.com/a/12945838
read_excel_allsheets <- function(filename, tibble = TRUE) {
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
return(x)
}
# read excell dataset
# (now I have a list of tibbles)
raw_avengers_list_of_tibble <- read_excel_allsheets("Avengers.xlsx")
# turn the list of tibble in one single tibble
raw_avengers_tibble <-
bind_rows(raw_avengers_list_of_tibble, .id="movie") %>%
# add ordered  id's
mutate(id = row_number()) %>%
select(id, everything())
# split rows were winner is a list of charater
raw_avengers_tibble_2 <- raw_avengers_tibble %>%
mutate(
divide_loser_n_by = str_count(winner, ",")+1,
) %>%
separate_rows(winner, sep=",")
# replace "charater" with "1-charater" in df$winner and df$looser
raw_avengers_tibble_3 <- raw_avengers_tibble_2 %>%
# mutate in winner
mutate(
winner = ifelse(
str_detect(winner, "-"),
winner,
paste("1", winner, sep="-")
)
) %>%
# mutate in loser
mutate(
loser = ifelse(
str_detect(loser, "-"),
loser,
paste("1", loser, sep="-")
)
)
# separate pairs "number-charater name" in 2 columns
# (in df$winner and df$looser)
fights_tidy <- raw_avengers_tibble_3 %>%
# separate winner
separate(winner, into=c("winner_n", "winner_charater"), sep="-") %>%
# separate loser
separate(loser, into=c("loser_n", "loser_charater"), sep="-") %>%
# convert cols winner_n and loser_n in numbers
mutate(
winner_n = as.double(winner_n),
loser_n = as.double(loser_n)/divide_loser_n_by
) %>%
select(everything(), -one_of(c("divide_loser_n_by")))
# undercase and remove spaces in names
fights_tidy <- fights_tidy %>%
mutate(
winner_charater= str_to_lower(str_replace_all(winner_charater, " ", "")),
loser_charater= str_to_lower(str_replace_all(loser_charater, " " , "")),
)
all_charaters <-
# all winners
fights_tidy %>%
select(winner_charater) %>%
rename(charater=winner_charater) %>%
bind_rows(
# all losers
fights_tidy %>%
select(loser_charater) %>%
rename(charater=loser_charater)
) %>%
distinct() %>%
mutate(id=row_number()) %>%
select(id, everything())
# save the dataset
write.csv(all_charaters, "charaters.csv")
# statistics for each charater
# add wins statistics foreach charater
all_charaters_statistics <- fights_tidy %>%
group_by(winner_charater) %>%
summarise(
n_win = n(),
) %>%
rename(charater=winner_charater) %>%
# add loss statistics foreach charater
full_join(
fights_tidy %>%
group_by(loser_charater) %>%
summarise(
n_lose = n()
) %>%
rename(charater=loser_charater),
by= "charater"
) %>%
# replace NA values with 0
replace_na(list(n_win=0, n_lose=0)) %>%
# calculate total fights
mutate(n_fights = n_win + n_lose) %>%
# arrange by fights number
arrange(-n_fights) %>%
# add charater type label
left_join(all_charaters, by="charater") %>%
# order columns
select(charater,n_fights, n_win, n_lose)
all_charaters_statistics
# remove fights where the number of winners/losers is unknow
fights_tidy_clear <- fights_tidy %>%
filter(!is.na(winner_n) & !is.na(loser_n))
# calculate the number of "integer" rows + extra foreach fight
fights_tidy_clear <- fights_tidy_clear %>%
mutate(
number_integer_rows = loser_n %/% winner_n,
extra = (loser_n %% winner_n) / winner_n
)
fights_elo_format_readable <-
# fights with integer score
fights_tidy_clear %>%
filter(number_integer_rows > 0) %>%
group_by(id) %>%
expand(count = seq(1:number_integer_rows), winner=winner_charater, loser=loser_charater, score=1) %>%
bind_rows(
# fights with decimal scores
fights_tidy_clear %>%
filter(extra>0) %>%
rename(
winner = winner_charater,
loser = loser_charater,
score = extra,
) %>%
mutate(count = number_integer_rows + 1) %>%
select(id, count, winner, loser, score)
) %>%
arrange(id, count)
# make the score from (0,1] -> (0.5,1]
# (they are all victories)
fights_elo_format_readable <- fights_elo_format_readable %>%
mutate(
score=0.5 + score/2
)
# insert charater ids
fights_elo_format_readable <- fights_elo_format_readable %>%
# set the id of winner
left_join(
all_charaters %>% rename(winner_id = id),
by=c("winner"="charater")
) %>%
# # set the id of winner
left_join(
all_charaters %>% rename(loser_id = id),
by=c("loser"="charater")
)
fights_elo_format <- fights_elo_format_readable %>%
# set correct var names
rename(White=winner_id, Black=loser_id, Score=score)
# save the dataset
write.csv(fights_elo_format, "fights_elo_format.csv")
fights_elo_format
##  Elo rating system
# INPUT
# games: a game *matrix* with columns White, Black and Score
#        Players are integer numbers starting at 1
#        The matrix is sorted in chronological order
# zeta: logistic parameter
# k: update factor
# OUTPUT
# r: rating vector
elo = function(games, z = 400, k = 25) {
# number of players
# (players are integer numbers starting at 1)
n = max(c(games[, "White"], games[, "Black"]))
# number of games
m = nrow(games)
# rating vector
r = rep(0, n)
# iterate through games
for (i in 1:m) {
score = games[i, "Score"]
white = games[i, "White"]
black = games[i, "Black"]
# compute update
spread = r[white] - r[black]
mu = 1 / (1 + 10^(-spread / z))
update = k * (score - mu)
# update ratings
r[white] = r[white] + update
r[black] = r[black] - update
}
return(r)
}
scores_list <- elo(as.data.frame(fights_elo_format))
scores <-
tibble(score = scores_list) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
left_join(all_charaters, by="id") %>%
arrange(-score)
ggplot(data=scores %>% head(), mapping = aes(x=reorder(charater, -score), y=score)) +
geom_bar(stat="identity")
print(scores)
runApp('C:/Users/Proprietario/Desktop/codici git/avengers ELO rating/Avengers-elo-app.R')
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("charaters.csv")
getwd()
setwd("C:\\Users\\Proprietario\\Desktop\\codici git\\avengers ELO rating")
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("fights_elo_format.csv")
# import charater Dataset
characters <- read.csv("charaters.csv")
View(characters)
# import charater Dataset
characters <- read.csv("charaters.csv") %>% select(id, name)
View(characters)
# import charater Dataset
characters <- read.csv("charaters.csv") %>% select(id, charater)
View(characters)
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
s <- scores[, input$time]
# make it as tibble
st <- tibble::enframe(s)
View(st)
# make it as tibble
st <- tibble::enframe(s) %>% rename(id=name, score=value)
View(st)
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
View(fights_elo_format_s)
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
scores <- elo_progressive(as.data.frame(fights_elo_format_s))
n_charaters <- dim(scores)[1]
n_steps <- dim(scores)[2]
# extract the scores at this specific time
s <- scores[, 800]
# make it as tibble
st <- tibble::enframe(s) %>% rename(id=name, score=value)
# join with charater list
st <- st %>% left_join(charaters, by=c('id'))
# charaters to print
ctp <- 10
ggplot(data=st %>% head(n=ctp), mapping = aes(x=reorder(character, -score), y=score)) +
geom_bar(stat="identity")
# extract the scores at this specific time
s <- scores[, 800]
# make it as tibble
st <- tibble::enframe(s) %>% rename(id=name, score=value)
# join with charater list
st <- st %>% left_join(charaters, by=c('id'))
# charaters to print
ctp <- 10
ggplot(data=st %>% head(n=ctp), mapping = aes(x=reorder(character, -score), y=score)) +
geom_bar(stat="identity")
# libs
library(shiny)
library(dplyr)
library(ggplot2)
# import ELO Ready Dataset
fights_elo_format_s <- read.csv("fights_elo_format.csv")
# import charater Dataset
charaters <- read.csv("charaters.csv") %>% select(id, charater)
# Progressive Elo ----
##  Elo rating system (with all steps)
# INPUT
# games: a game *matrix* with columns White, Black and Score
#        Players are integer numbers starting at 1
#        The matrix is sorted in chronological order
# zeta: logistic parameter
# k: update factor
# OUTPUT
# r: rating vector
elo_progressive = function(games, z = 400, k = 25) {
# number of players
# (players are integer numbers starting at 1)
n = max(c(games[, "White"], games[, "Black"]))
# number of games
m = nrow(games)
# rating vector
r = matrix(0, n, m+1)
# iterate through games
for (i in 2:m+1) {
score = games[i, "Score"]
white = games[i, "White"]
black = games[i, "Black"]
# compute update
spread = r[white, i-1] - r[black, i-1]
mu = 1 / (1 + 10^(-spread / z))
update = k * (score - mu)
# "carry on" old values
for(j in 1:n) {
r[j, i] = r[j, i-1]
}
# update ratings
r[white, i] = r[white, i-1] + update
r[black, i] = r[black, i-1] - update
}
return(r)
}
scores <- elo_progressive(as.data.frame(fights_elo_format_s))
n_charaters <- dim(scores)[1]
n_steps <- dim(scores)[2]
# extract the scores at this specific time
s <- scores[, 800]
# make it as tibble
st <- tibble::enframe(s) %>% rename(id=name, score=value)
# join with charater list
st <- st %>% left_join(charaters, by=c('id'))
# charaters to print
ctp <- 10
ggplot(data=st %>% head(n=ctp), mapping = aes(x=reorder(character, -score), y=score)) +
geom_bar(stat="identity")
View(st)
s <- scores[, 800]
# make it as tibble
st <- tibble::enframe(s) %>% rename(id=name, score=value)
# join with charater list
st <- st %>% left_join(charaters, by=c('id'))
# charaters to print
ctp <- 10
ggplot(data=st %>% head(n=ctp), mapping = aes(x=reorder(charater, -score), y=score)) +
geom_bar(stat="identity")
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
runApp('Avengers-elo-app.R')
